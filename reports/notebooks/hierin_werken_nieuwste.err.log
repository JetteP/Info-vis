Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/asyncio/base_events.py", line 685, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/anaconda3/lib/python3.12/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import plotly.graph_objects as go
import plotly.io as pio
pio.renderers.default = "vscode"

# ───────────────────────────────────────────────────────────────
# 1. DATA INLEZEN
# ───────────────────────────────────────────────────────────────
emissions_animal = pd.read_csv("datasets/FAOSTAT_data_emissions_animal_6-23-2025.csv")
emissions_crops  = pd.read_csv("datasets/FAOSTAT_data_emissions_crops_6-23-2025-2.csv")
export_matrix    = pd.read_csv("datasets/matrix_export.csv")
population       = pd.read_csv("datasets/Population_E_All_Data_(Normalized).csv")

# ───────────────────────────────────────────────────────────────
# 2. GEGEVENS OPSCHONEN & SAMENVOEGEN
# ───────────────────────────────────────────────────────────────
population_clean = (
    population[
        (population["Element"] == "Total Population - Both sexes") &
        (population["Area"].isin([
            "Argentina", "Brazil", "India", "Thailand",
            "Netherlands", "United States of America"
        ]))
    ][["Area", "Year", "Value"]]
    .rename(columns={"Value": "Population (1000s)"})
)
population_clean["Year"] = population_clean["Year"].astype(int)

animal = emissions_animal[
    emissions_animal["Area"].isin([
        "Argentina", "Brazil", "India", "Thailand",
        "Netherlands", "United States of America"
    ]) &
    emissions_animal["Element"].str.contains("Emissions")
]

crops = emissions_crops[
    emissions_crops["Area"].isin([
        "Argentina", "Brazil", "India", "Thailand",
        "Netherlands", "United States of America"
    ]) &
    emissions_crops["Element"].str.contains("Emissions")
]

emissions_all = pd.concat([animal, crops])
emissions_all["Year"] = emissions_all["Year"].astype(int)
emissions_all = (
    emissions_all
    .groupby(["Area", "Year"])["Value"]
    .sum()
    .reset_index()
    .rename(columns={"Value": "Total Emissions (kt CO2eq)"})
)

export_volume = (
    export_matrix[
        (export_matrix["Element"] == "Export quantity") &
        (export_matrix["Reporter Countries"].isin([
            "Argentina", "Brazil", "India", "Thailand",
            "Netherlands", "United States of America"
        ]))
    ][["Reporter Countries", "Year", "Value"]]
    .groupby(["Reporter Countries", "Year"])
    .sum()
    .reset_index()
    .rename(columns={
        "Reporter Countries": "Area",
        "Value": "Total Export Volume (tonnes)"
    })
)
export_volume["Year"] = export_volume["Year"].astype(int)

df = (
    emissions_all
    .merge(population_clean, on=["Area", "Year"], how="left")
    .merge(export_volume,  on=["Area", "Year"], how="left")
)
df = df[df["Year"] >= 1985]

df["Emissions per Capita (tonnes CO2eq)"] = (
    df["Total Emissions (kt CO2eq)"] * 1_000
) / (df["Population (1000s)"] * 1_000)
df["Export per Capita (tonnes)"] = (
    df["Total Export Volume (tonnes)"]
) / (df["Population (1000s)"] * 1_000)
df["Emissions per Export Tonne (kg CO2eq/tonne)"] = (
    df["Total Emissions (kt CO2eq)"] * 1_000_000
) / df["Total Export Volume (tonnes)"]

metrics = {
    "Total Emissions (kt CO2eq)":               "Total Emissions (kt CO2eq)",
    "Emissions per Capita (tonnes CO2eq)":      "Emissions per Capita (tonnes CO2eq)",
    "Total Export Volume (tonnes)":             "Total Export Volume (tonnes)",
    "Export per Capita (tonnes)":               "Export per Capita (tonnes)",
    "Emissions per Export Tonne (kg CO2eq/tonne)":
        "Emissions per Export Tonne (kg CO2eq/tonne)"
}

# ───────────────────────────────────────────────────────────────
# 3. STIJLDEFINITIE – handmatig per land
# ───────────────────────────────────────────────────────────────
line_styles = {
    "Argentina": {
        "color": "#F79B9B",
        "dash":  "solid",
        "width": 3
    },
    "Brazil": {
        "color": "#F7CB9B",
        "dash":  "solid",
        "width": 3
    },
    "India": {
        "color": "#A1F79B",
        "dash":  "solid",
        "width": 3
    },
    "Thailand": {
        "color": "#6CBEF5",
        "dash":  "solid",
        "width": 3
    },
    "Netherlands": {
        "color": "#A39BF7",
        "dash":  "solid",
        "width": 3
    },
    "United States of America": {
        "color": "#F1A1F7",
        "dash":  "solid",
        "width": 3
    }
}

# ───────────────────────────────────────────────────────────────
# 4. FIGUUR MAKEN – met eigen stijlen
# ───────────────────────────────────────────────────────────────
fig = go.Figure()

for metric_idx, (metric_name, col) in enumerate(metrics.items()):
    for country in df["Area"].unique():
        subset  = df[df["Area"] == country]
        visible = (metric_idx == 0)

        style   = line_styles.get(country, {})
        fig.add_trace(
            go.Scatter(
                x=subset["Year"],
                y=subset[col],
                mode="lines",
                name=country,
                visible=visible,
                legendgroup=country,
                showlegend=True,
                line=dict(
                    color=style.get("color", None),
                    dash=style.get("dash",  "solid"),
                    width=style.get("width", 2)
                )
            )
        )

n_countries      = len(df["Area"].unique())
dropdown_buttons = []

for i, (metric_name, _) in enumerate(metrics.items()):
    visibility = [False] * len(metrics) * n_countries
    for j in range(n_countries):
        visibility[i * n_countries + j] = True
    dropdown_buttons.append(
        dict(
            label=metric_name,
            method="update",
            args=[
                {"visible": visibility},
                {"yaxis": {"title": metric_name}}
            ]
        )
    )

fig.update_layout(
    updatemenus=[{
        "buttons":       dropdown_buttons,
        "direction":     "down",
        "showactive":    True,
        "x":             1.03,
        "xanchor":       "left",
        "y":             0.95,
        "yanchor":       "top",
        "pad":           {"r": 0, "t": 0},
        "font":          {"size": 11},
        "bgcolor":       "white"
    }],
    title="Agricultural Emissions & Exports (1985–2020)",
    xaxis_title="Year",
    yaxis_title="Total Emissions (kt CO2eq)",
    legend_title="Country",
    legend=dict(
        x=1.03,
        xanchor="left",
        y=0.8,
        yanchor="top"
    ),
    margin=dict(r=160, l=80, t=80, b=60),
    height=600,
    width=900
)

# ───────────────────────────────────────────────────────────────
# 5. INTERFACE NAAR HET NEDERLANDS
# ───────────────────────────────────────────────────────────────

vertaling = {
    "Total Emissions (kt CO2eq)":               "Totale uitstoot (kiloton CO₂-equ.)",
    "Emissions per Capita (tonnes CO2eq)":      "Uitstoot per inwoner (ton CO₂-equ.)",
    "Total Export Volume (tonnes)":             "Totaal export­volume (ton)",
    "Export per Capita (tonnes)":               "Export per inwoner (ton)",
    "Emissions per Export Tonne (kg CO2eq/tonne)":
        "Uitstoot per ton export (kg CO₂-equ.)"
}

for btn in fig.layout.updatemenus[0].buttons:
    eng = btn.label
    if eng in vertaling:
        dut = vertaling[eng]
        btn.label                     = dut
        btn.args[1]["yaxis"]["title"] = dut

fig.update_layout(
    title="Landbouw­emissies en -export (1985–2020)",
    xaxis_title="Jaar",
    yaxis_title="Totale uitstoot (kt CO2-eq)",
    legend_title="Land"
)

# ───────────────────────────────────────────────────────────────
# 6. VISUALISATIE TONEN
# ───────────────────────────────────────────────────────────────
fig.show()

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[1], line 9[0m
[1;32m      4[0m pio[38;5;241m.[39mrenderers[38;5;241m.[39mdefault [38;5;241m=[39m [38;5;124m"[39m[38;5;124mvscode[39m[38;5;124m"[39m
[1;32m      6[0m [38;5;66;03m# ───────────────────────────────────────────────────────────────[39;00m
[1;32m      7[0m [38;5;66;03m# 1. DATA INLEZEN[39;00m
[1;32m      8[0m [38;5;66;03m# ───────────────────────────────────────────────────────────────[39;00m
[0;32m----> 9[0m emissions_animal [38;5;241m=[39m [43mpd[49m[38;5;241;43m.[39;49m[43mread_csv[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mdatasets/FAOSTAT_data_emissions_animal_6-23-2025.csv[39;49m[38;5;124;43m"[39;49m[43m)[49m
[1;32m     10[0m emissions_crops  [38;5;241m=[39m pd[38;5;241m.[39mread_csv([38;5;124m"[39m[38;5;124mdatasets/FAOSTAT_data_emissions_crops_6-23-2025-2.csv[39m[38;5;124m"[39m)
[1;32m     11[0m export_matrix    [38;5;241m=[39m pd[38;5;241m.[39mread_csv([38;5;124m"[39m[38;5;124mdatasets/matrix_export.csv[39m[38;5;124m"[39m)

File [0;32m/opt/anaconda3/envs/jupyterbook/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1026[0m, in [0;36mread_csv[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)[0m
[1;32m   1013[0m kwds_defaults [38;5;241m=[39m _refine_defaults_read(
[1;32m   1014[0m     dialect,
[1;32m   1015[0m     delimiter,
[0;32m   (...)[0m
[1;32m   1022[0m     dtype_backend[38;5;241m=[39mdtype_backend,
[1;32m   1023[0m )
[1;32m   1024[0m kwds[38;5;241m.[39mupdate(kwds_defaults)
[0;32m-> 1026[0m [38;5;28;01mreturn[39;00m [43m_read[49m[43m([49m[43mfilepath_or_buffer[49m[43m,[49m[43m [49m[43mkwds[49m[43m)[49m

File [0;32m/opt/anaconda3/envs/jupyterbook/lib/python3.10/site-packages/pandas/io/parsers/readers.py:620[0m, in [0;36m_read[0;34m(filepath_or_buffer, kwds)[0m
[1;32m    617[0m _validate_names(kwds[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mnames[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m))
[1;32m    619[0m [38;5;66;03m# Create the parser.[39;00m
[0;32m--> 620[0m parser [38;5;241m=[39m [43mTextFileReader[49m[43m([49m[43mfilepath_or_buffer[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwds[49m[43m)[49m
[1;32m    622[0m [38;5;28;01mif[39;00m chunksize [38;5;129;01mor[39;00m iterator:
[1;32m    623[0m     [38;5;28;01mreturn[39;00m parser

File [0;32m/opt/anaconda3/envs/jupyterbook/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1620[0m, in [0;36mTextFileReader.__init__[0;34m(self, f, engine, **kwds)[0m
[1;32m   1617[0m     [38;5;28mself[39m[38;5;241m.[39moptions[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m] [38;5;241m=[39m kwds[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m]
[1;32m   1619[0m [38;5;28mself[39m[38;5;241m.[39mhandles: IOHandles [38;5;241m|[39m [38;5;28;01mNone[39;00m [38;5;241m=[39m [38;5;28;01mNone[39;00m
[0;32m-> 1620[0m [38;5;28mself[39m[38;5;241m.[39m_engine [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_make_engine[49m[43m([49m[43mf[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mengine[49m[43m)[49m

File [0;32m/opt/anaconda3/envs/jupyterbook/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1880[0m, in [0;36mTextFileReader._make_engine[0;34m(self, f, engine)[0m
[1;32m   1878[0m     [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m mode:
[1;32m   1879[0m         mode [38;5;241m+[39m[38;5;241m=[39m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m
[0;32m-> 1880[0m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;241m=[39m [43mget_handle[49m[43m([49m
[1;32m   1881[0m [43m    [49m[43mf[49m[43m,[49m
[1;32m   1882[0m [43m    [49m[43mmode[49m[43m,[49m
[1;32m   1883[0m [43m    [49m[43mencoding[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mencoding[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[1;32m   1884[0m [43m    [49m[43mcompression[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mcompression[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[1;32m   1885[0m [43m    [49m[43mmemory_map[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mmemory_map[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m[43m,[49m
[1;32m   1886[0m [43m    [49m[43mis_text[49m[38;5;241;43m=[39;49m[43mis_text[49m[43m,[49m
[1;32m   1887[0m [43m    [49m[43merrors[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mencoding_errors[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mstrict[39;49m[38;5;124;43m"[39;49m[43m)[49m[43m,[49m
[1;32m   1888[0m [43m    [49m[43mstorage_options[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43moptions[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mstorage_options[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[1;32m   1889[0m [43m[49m[43m)[49m
[1;32m   1890[0m [38;5;28;01massert[39;00m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[1;32m   1891[0m f [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mhandles[38;5;241m.[39mhandle

File [0;32m/opt/anaconda3/envs/jupyterbook/lib/python3.10/site-packages/pandas/io/common.py:873[0m, in [0;36mget_handle[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[0m
[1;32m    868[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(handle, [38;5;28mstr[39m):
[1;32m    869[0m     [38;5;66;03m# Check whether the filename is to be opened in binary mode.[39;00m
[1;32m    870[0m     [38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.[39;00m
[1;32m    871[0m     [38;5;28;01mif[39;00m ioargs[38;5;241m.[39mencoding [38;5;129;01mand[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m ioargs[38;5;241m.[39mmode:
[1;32m    872[0m         [38;5;66;03m# Encoding[39;00m
[0;32m--> 873[0m         handle [38;5;241m=[39m [38;5;28;43mopen[39;49m[43m([49m
[1;32m    874[0m [43m            [49m[43mhandle[49m[43m,[49m
[1;32m    875[0m [43m            [49m[43mioargs[49m[38;5;241;43m.[39;49m[43mmode[49m[43m,[49m
[1;32m    876[0m [43m            [49m[43mencoding[49m[38;5;241;43m=[39;49m[43mioargs[49m[38;5;241;43m.[39;49m[43mencoding[49m[43m,[49m
[1;32m    877[0m [43m            [49m[43merrors[49m[38;5;241;43m=[39;49m[43merrors[49m[43m,[49m
[1;32m    878[0m [43m            [49m[43mnewline[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m    879[0m [43m        [49m[43m)[49m
[1;32m    880[0m     [38;5;28;01melse[39;00m:
[1;32m    881[0m         [38;5;66;03m# Binary mode[39;00m
[1;32m    882[0m         handle [38;5;241m=[39m [38;5;28mopen[39m(handle, ioargs[38;5;241m.[39mmode)

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'datasets/FAOSTAT_data_emissions_animal_6-23-2025.csv'

